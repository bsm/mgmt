#!/usr/bin/env ruby

require 'fileutils'
require 'tempfile'
require 'pathname'

module MGMT
  extend self

  DEPSFILE = "Gopherfile"
  LOCKFILE = "Gopherfile.lock"
  VENDOR   = ".vendor"
  VERSION  = "0.3.0"

  def xputs(code, msg)
    code = nil if ENV['TERM'] != "xterm"
    print "\033[#{code}m" if code
    print msg
    print "\033[0m" if code
    print "\n"
  end

  def sh(cmd)
    system(cmd) || abort("Failed to execute command: #{cmd}")
  end

  def shv(cmd)
    value = `#{cmd}`
    abort "Failed to execute command: #{cmd}" unless $?.success?
    value.strip
  end

  def abort(msg)
    xputs "31", ">>> #{msg}"
    Kernel.exit(1)
  end

  def read
    abort "#{DEPSFILE} not found" unless File.exist?(DEPSFILE)

    deps = Deps.parse(DEPSFILE, :tag)
    deps.merge! Deps.parse(LOCKFILE, :rev) if File.exist?(LOCKFILE)
    deps
  end

  def pull(deps)
    deps.each do |dep|
      MGMT.xputs "33",  "### #{dep.name}"
      if dep.pull!
        MGMT.xputs nil, "    now at ##{dep.version}"
      end
    end
  end

  def update(deps, updates)
    versions = {}
    updates.each do |str|
      name, rev = str.split("#", 2)
      versions[name] = rev
    end
    deps.select do |dep|
      versions.include?(dep.name)
    end.each do |dep|
      dep.rev = versions[dep.name]
    end
  end

  def lock(deps)
    deps.lock!
    MGMT.xputs "32", "=== #{LOCKFILE} written"
  end

  def exec(*c)
    ENV['GOPATH'] = [find_vendor, ENV['GOPATH']].join(':')
    Kernel.exec(*c)
  end

  def find_vendor
    Pathname.pwd.ascend do |dir|
      vendor = dir.join(VENDOR)
      return vendor if vendor.directory?
    end
  end

  class Deps < Array

    def self.parse(file, field)
      deps = []
      File.read(file).each_line do |line|
        deps.push Dep.parse(line, field)
      end
      new deps.compact
    end

    def find(name)
      detect {|i| i.name == name }
    end

    def select
      self.class.new(super)
    end

    def merge!(locked)
      each do |dep|
        match   = locked.find(dep.name)
        dep.rev = match.rev if match
      end
    end

    def lock!
      temp = Tempfile.new LOCKFILE
      each {|dep| temp.puts dep.to_s }
      temp.close
      FileUtils.mv temp.path, LOCKFILE
    end

  end

  class Dep

    def self.parse(line, field)
      line   = line.strip
      return if line[0] == "#"

      tokens = line.split(/ +/)
      return if tokens.empty?

      opts = {}
      tokens[1..-1].each do |token|
        case token[0]
        when "!", 33
          opts[:repo] = token[1..-1]
        when "#", 35
          opts[field] = token[1..-1]
        end
      end
      new tokens[0], opts
    end

    attr_reader   :name, :repo
    attr_accessor :tag, :rev

    def initialize(name, opts = {})
      @name = name
      @tag  = opts[:tag] # Specified tag
      @rev  = opts[:rev] # Locked rev
      @repo = opts[:repo] || "http://#{name}"
    end

    def target
      @target ||= File.join(VENDOR, 'src', @name)
    end

    def version
      @rev || @tag || 'master'
    end

    def pull!
      current = MGMT.shv("cd #{target} && git --git-dir=.git log -n 1 --pretty=format:'%h'") if File.directory?(target)
      return false if current && current == rev

      if current.nil?
        MGMT.sh "git clone -q #{@repo} #{target}"
      else
        MGMT.sh "cd #{target} && git --git-dir=.git fetch -q origin"
      end

      remote = "origin/#{version}"
      @rev = MGMT.shv "cd #{target} && git --git-dir=.git show-ref -q #{remote} && git --git-dir=.git rev-parse --short #{remote} || git --git-dir=.git rev-parse --short #{version}"

      MGMT.sh "cd #{target} && git --git-dir=.git reset -q --hard #{rev}"
      true
    end

    def to_s
      "#{@name} ##{version} !#{@repo}"
    end
  end
end

# -------------------------------------------------------------------------

case ARGV.shift
when "install", nil
  deps = MGMT.read
  MGMT.pull(deps)
  MGMT.lock(deps)
when "go"
  MGMT.exec "go", *ARGV
when "update"
  deps = MGMT.read
  some = MGMT.update(deps, ARGV)
  unless some.empty?
    MGMT.pull(some)
    MGMT.lock(deps)
  end
when "version"
  puts MGMT::VERSION
else
  puts %(mgmt is a minimalistic solution to managing Go dependencies.

Usage:

  mgmt command [arguments]

The commands are:

  install  bundle dependencies in .vendor
  go       run go within the scope of .vendor
  update   update a single package
  version  print the version
  help     print this information

)
  exit 2
end if File.basename($0) == File.basename(__FILE__)
